#!/usr/bin/env tclsh
package require tcltest
namespace import ::tcltest::*
proc skip {args} {
    if {!([info exists ::env(RUN_ALL)] && $::env(RUN_ALL))} {
        ::tcltest::skip {*}$args
    }
}

proc dictionaryMatch {expected actual} {
    if {[dict size $expected] != [dict size $actual]} {
        return false
    }
    dict for {key value} $expected {
        if {![dict exists $actual $key]} {
            return false
        }
        set actualValue [dict get $actual $key]

        # if this value is a dict then recurse,
        # else just check for string equality
        if {[string is list -strict $value] &&
            [llength $value] > 1 &&
            [llength $value] % 2 == 0
        } {
            set procname [lindex [info level 0] 0]
            if {![$procname $value $actualValue]} {
                return false
            }
        } elseif {$actualValue ne $value} {
            return false
        }
    }
    return true
}
customMatch dictionary dictionaryMatch

############################################################
source "etl.tcl"

test etl-1 "single letter" -body {
    transform {1 {A}}
} -returnCodes ok -match dictionary -result {a 1}

skip etl-2
test etl-2 "single score with multiple letters" -body {
    transform {1 {A E I O U}}
} -returnCodes ok -match dictionary -result {a 1 e 1 i 1 o 1 u 1}

skip etl-3
test etl-3 "multiple scores with multiple letters" -body {
    transform {1 {A E} 2 {D G}}
} -returnCodes ok -match dictionary -result {a 1 d 2 e 1 g 2}

skip etl-4
test etl-4 "multiple scores with differing numbers of letters" -body {
    transform {
        1 {A E I O U L N R S T}
        2 {D G}
        3 {B C M P}
        4 {F H V W Y}
        5 {K}
        8 {J X}
        10 {Q Z}
    }
} -returnCodes ok -match dictionary -result {
    a 1 b 3 c 3 d 2 e 1 f 4 g 2 h 4 i 1 j 8
    k 5 l 1 m 3 n 1 o 1 p 3 q 10 r 1 s 1 t 1
    u 1 v 4 w 4 x 8 y 4 z 10
}


skip etl-5
test etl-5 "odd number of list elements" -body {
    transform {1 {a b c} 2}
} -returnCodes error -result "invalid input"

cleanupTests
