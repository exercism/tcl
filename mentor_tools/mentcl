#!/usr/bin/env tclsh
# vim: ft=tcl

# This tool is meant as an aid to mentors reviewing a
# student's submission. It will:
# 1. download the exercise (this should place it in the
#    "users/" subdirectory of your exercism workspace).
# 2. run a syntax checker on the code, if you have one set up.
# 3. check github for the existance of mentor notes.
# 4. show the code and ask if you want to run the tests.
# 5. launch an interactive tclsh shell, so you can
#    play with the solution.

package require Tcl 8.6
package require http
package require tls
::http::register https 443 ::tls::socket

set DEBUG false

############################################################
proc download {uuid} {
    set out [doExercism download --uuid=$uuid]
    puts $out
    set directory [string trim [lindex [split $out \n] end]]
    if {![file isdirectory $directory]} {
        error "Error: could not find the download directory in exercism output"
    }
    return $directory
}

proc validateDownload {slug} {
    if {![file isfile "$slug.tcl"]} {
        error "This solution has no source file"
    }
    if {![file isfile "$slug.test"]} {
        error "This solution has no test file"
    }
}

############################################################
proc runSyntaxCheck {sourceFile} {
    global SYNTAX_CHECKER
    if {![info exists ::SYNTAX_CHECKER]} {
        puts "No syntax checker defined"
        return
    }
    if {!([file exists $SYNTAX_CHECKER] && [file executable $SYNTAX_CHECKER])} {
        try {
            exec which $::SYNTAX_CHECKER
        } trap NONE e {
            error "Error: $::SYNTAX_CHECKER is not in the PATH"
        }
    }
    checkSyntax $sourceFile
}

proc checkSyntax {sourceFile} {
    puts "Define this proc in your [mentclrcFile]"
}

############################################################
proc mentorNotes {slug} {
    set url "https://raw.githubusercontent.com/exercism/website-copy/master/tracks/tcl/exercises/$slug/mentoring.md"
    set token [http::geturl $url]
    switch [http::ncode $token] {
        404 {puts "No mentor notes for $slug"}
        200 {puts [http::data $token]}
        default {
            puts "Unexpected result for $url"
            puts [http::code $token]
            puts [http::data $token]
        }
    }
    http::cleanup $token
}

############################################################
proc runTests {slug} {
    puts "Next step is testing:
I will not do that automatically.
*******************************************
*** Make sure you're reviewed the code, ***
***    and that it is not malicious!    ***
*******************************************"

    displayCode "$slug.tcl"

    puts "*******************************************"
    if {![yn "OK to run tests" Y]} then return

    puts ""
    set start [clock microseconds]
    try {
        puts [exec tclsh "$slug.test"]
    } trap NONE e {
        puts "Not all tests passing:\n$e"
        return
    }

    set duration [expr {([clock microseconds] - $start) / 1e6}]

    puts ""
    puts "Duration: $duration seconds"
}

# Default function to display the code.
# Can be overridden in the config file if you want a different output.
proc displayCode {file} {
    puts [exec cat -n $file]
}

############################################################
proc goInteractive {} {
    puts "PWD = [regsub "^$::env(HOME)" [pwd] {~}]"
    puts "Launching an interactive tclsh ...\n"
    try {
        exec rlwrap tclsh <@stdin >@stdout 2>@stderr
    } trap NONE e {
        exec tclsh <@stdin >@stdout 2>@stderr
    }
}

############################################################
proc doExercism {args} {
    try {
        set output [exec exercism {*}$args 2>@stdout]
    } on error e {
        debug $::errorInfo $::errorCode
        error "Error: exercism $args failed:\n$e"
    }
    debug output $output
    return $output
}

proc readMentclrc {} {
    set mentclrc [mentclrcFile]
    if {[file readable $mentclrc]} {
        debug "reading $mentclrc"
        uplevel #0 [list source $mentclrc]
    }
}

proc mentclrcFile {} {
    set output [doExercism configure]
    if {![regexp -line {^Config dir:\s+(.+)$} $output -> configDir]} {
        error "Error: can't find config dir in exercism configure output"
    }
    return [file join $configDir mentclrc.tcl]
}

proc debug {args} {
    if {!$::DEBUG} then return
    puts stderr [list [lindex [info level -1] 0] {*}$args]
}

proc yn {prompt {default ""}} {
    switch -exact $default {
        Y  {set yn "Yn"; set def Y}
        N  {set yn "yN"; set def N}
        "" {set yn "yn"; set def ""}
    }
    puts -nonewline "$prompt \[$yn]? "
    flush stdout
    gets stdin answer
    set answer [string trim $answer]
    if {$answer eq ""} then {set answer $def}
    string match -nocase {Y*} $answer
}

proc title {str} {
    puts [format "\n%s\n%s" $str [string repeat = [string length $str]]]
}

############################################################
proc main {args} {
    # find the UUID in the args
    if {![regexp {[[:alnum:]]{32}} [join $args] uuid]} {
        puts stderr "Usage: [info script] ...UUID..."
        puts stderr "Downloads the submission, and runs test and syntax check"
        exit 1
    }

    readMentclrc

    debug uuid $uuid

    title "Download"
    set workdir [download $uuid]
    debug workdir $workdir

    cd $workdir
    set slug [file tail $workdir]
    validateDownload $slug

    title "Syntax Check"
    runSyntaxCheck "$slug.tcl"

    title "Mentor Notes"
    mentorNotes $slug

    title "Run Tests"
    runTests $slug

    title "Playtime"
    goInteractive
}

main $argv
